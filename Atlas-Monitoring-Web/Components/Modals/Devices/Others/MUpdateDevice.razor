@using Atlas_Monitoring_Web.Core.Interfaces.Application
@using Atlas_Monitoring_Web.Core.Models.Database
@using Atlas_Monitoring_Web.Core.Models.ViewModels
@using Atlas_Monitoring_Web.CustomException
@using Atlas_Monitoring_Web.Locales
@using Microsoft.Extensions.Localization
@using Serilog
@inject IDeviceRepository _deviceRepository

<div class="row">
    <div class="form-control col">
        <label>@localizer["DeviceType"] : </label>
        <input class="form-control" value="@localizer[deviceReadViewModel.DeviceTypeName]" disabled/>
    </div>
</div>

<div class="row">
    <div class="form-group col">
        <label>@localizer["DeviceName"] : </label>
        <input class="form-control" @bind-value="deviceReadViewModel.Name" maxlength="15" />
    </div>
</div>

<div class="row">
    <div class="form-group col">
        <label>Ip : </label>
        <input class="form-control" @bind-value="deviceReadViewModel.Ip" maxlength="15" />
    </div>
</div>

<div class="row">
    <div class="form-group col">
        <label>@localizer["Domain"] : </label>
        <input class="form-control" @bind-value="deviceReadViewModel.Domain" maxlength="25" />
    </div>
</div>

<div class="row">
    <div class="form-group col">
        <label>@localizer["UserName"] : </label>
        <input class="form-control" @bind-value="deviceReadViewModel.UserName" maxlength="48" />
    </div>
</div>

<div class="row">
    <div class="form-group col">
        <label>@localizer["SerialNumber"] : </label>
        <input class="form-control" @bind-value="deviceReadViewModel.SerialNumber" maxlength="120" />
    </div>
</div>

<div class="row">
    <div class="form-group col">
        <label>@localizer["Model"] : </label>
        <input class="form-control" @bind-value="deviceReadViewModel.Model" maxlength="60" />
    </div>
</div>

<div class="row">
    <div class="form-group col">
        <label>@localizer["Manufacturer"] : </label>
        <input class="form-control" @bind-value="deviceReadViewModel.Manufacturer" maxlength="60" />
    </div>
</div>

<Button @ref="updateButton" Color="ButtonColor.Primary" style="display: block; margin: auto;" @onclick="UpdateDevice">@localizer["Save"]</Button>



@code {
    #region Properties
    [Parameter] public DeviceReadViewModel deviceReadViewModel { get; set; } = new();
    [Parameter] public EventCallback<bool> CloseModal { get; set; }
    private Button updateButton = default!;
    #endregion

    #region Constructor
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            PreloadService.Show();

            if (firstRender)
            {
                StateHasChanged();
            }

            await base.OnAfterRenderAsync(firstRender);
        }
        catch (CustomDataLayerException ex)
        {
            ToastService.Notify(new()
                {
                    Title = localizer["Warning"],
                    Message = ex.Message,
                    IconName = IconName.ExclamationDiamondFill,
                    Type = ToastType.Warning
                });

            Log.Warning(ex.Message);
        }
        catch (Exception ex)
        {
            ToastService.Notify(new()
                {
                    Title = localizer["Error"],
                    Message = ex.Message,
                    IconName = IconName.ExclamationDiamondFill,
                    Type = ToastType.Danger
                });

            Log.Error(ex, "An error occurred !");
        }
        finally
        {
            PreloadService.Hide();
        }
    }
    #endregion

    #region Private Methods
    private async Task UpdateDevice()
    {
        try
        {
            updateButton.ShowLoading($"{localizer["Saving"]}...");
            await Task.Delay(1);

            CheckNewDeviceData();

            DeviceWriteViewModel deviceWriteViewModel = new DeviceWriteViewModel
                {
                    Id = deviceReadViewModel.Id,
                    DeviceStatus = deviceReadViewModel.DeviceStatus,
                    DeviceTypeId = deviceReadViewModel.DeviceTypeId,
                    Name = deviceReadViewModel.Name,
                    Ip = deviceReadViewModel.Ip,
                    Domain = deviceReadViewModel.Domain,
                    UserName = deviceReadViewModel.UserName,
                    SerialNumber = deviceReadViewModel.SerialNumber,
                    Model = deviceReadViewModel.Model,
                    Manufacturer = deviceReadViewModel.Manufacturer
                };

            await _deviceRepository.UpdateDevice(deviceWriteViewModel);

            await CloseModal.InvokeAsync(true);

            ToastService.Notify(new()
                {
                    Title = localizer["Success"],
                    Message = localizer["Msg_DeviceUpdated"],
                    IconName = IconName.Check,
                    Type = ToastType.Success
                });
        }
        catch (CustomWebException ex)
        {
            ToastService.Notify(new()
                {
                    Title = localizer["Warning"],
                    Message = ex.Message,
                    IconName = IconName.ExclamationDiamondFill,
                    Type = ToastType.Warning
                });

            Log.Warning(ex.Message);
        }
        catch (CustomDataLayerException ex)
        {
            ToastService.Notify(new()
                {
                    Title = localizer["Warning"],
                    Message = ex.Message,
                    IconName = IconName.ExclamationDiamondFill,
                    Type = ToastType.Warning
                });

            Log.Warning(ex.Message);
        }
        catch (Exception ex)
        {
            ToastService.Notify(new()
                {
                    Title = localizer["Error"],
                    Message = ex.Message,
                    IconName = IconName.ExclamationDiamondFill,
                    Type = ToastType.Danger
                });

            Log.Error(ex, "An error occurred !");
        }
        finally
        {
            updateButton.HideLoading();
        }
    }

    private void CheckNewDeviceData()
    {
        if (deviceReadViewModel.Name == string.Empty)
        {
            throw new CustomWebException(localizer["Err_DeviceNameEmpty"]);
        }
    }
    #endregion
}
