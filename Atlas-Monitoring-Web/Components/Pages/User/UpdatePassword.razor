@page "/User/UpdatePassword"
@using Atlas_Monitoring_Web.Core.Interfaces.Application
@using Atlas_Monitoring_Web.Core.Models.ViewModels
@using Atlas_Monitoring_Web.CustomException
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Serilog
@inject AuthenticationStateProvider AuthStateProvider
@inject ProtectedSessionStorage _protectedSessionStorage
@inject IConfiguration Configuration
@inject IUserRepository _userRepository

<div style="width: 450px; display: block; margin: auto">
    <h3 style="text-align: center; margin-bottom: 10px">@localizer["UpdatePassword"]</h3>

    <label>@localizer["Password"]</label>
    <InputText @bind-Value="authUser.Password" DisplayName="Password" @onkeyup="EnterKey" type="password" class="form-control" />

    <label>@localizer["ConfirmPassword"]</label>
    <InputText @bind-Value="confirmPassword" DisplayName="Password" @onkeyup="EnterKey" type="password" class="form-control" />

    <Button @ref="confirmButton" Color="ButtonColor.Primary" @onclick="TryUpdatePassword" Style="display: block; margin: auto; margin-top: 10px">@localizer["Confirm"]</Button>
</div>


@code {
    #region Private
    private AuthUserViewModel authUser = new();
    private string confirmPassword = string.Empty;
    private Button confirmButton = default!;
    #endregion

    #region Constructor
    protected override async Task OnInitializedAsync()
    {
        try
        {
            PreloadService.Show();
        }
        catch (CustomDataLayerException ex)
        {
            ToastService.Notify(new()
                {
                    Title = localizer["Warning"],
                    Message = ex.Message,
                    IconName = IconName.ExclamationDiamondFill,
                    Type = ToastType.Warning
                });

            Log.Warning(ex.Message);
        }
        catch (Exception ex)
        {
            ToastService.Notify(new()
                {
                    Title = localizer["Error"],
                    Message = ex.Message,
                    IconName = IconName.ExclamationDiamondFill,
                    Type = ToastType.Danger
                });

            Log.Error(ex, "An error occurred !");
        }
        finally
        {
            PreloadService.Hide();
        }
    }
    #endregion

    #region Private Methods
    private async Task EnterKey(KeyboardEventArgs e)
    {
        if (!confirmButton.Loading)
        {
            if (e.Code == "Enter" || e.Code == "NumpadEnter")
            {
                await TryUpdatePassword();
            }
        }
    }

    private async Task TryUpdatePassword()
    {
        try
        {
            if (authUser.Password == confirmPassword)
            {
                confirmButton.ShowLoading($"{localizer["Saving"]}...");
                await Task.Delay(1);

                authUser.UserName = (await _protectedSessionStorage.GetAsync<string>("username")).Value;

                await _userRepository.UpdatePassword(authUser);

                authUser.Password = string.Empty;
                confirmPassword = string.Empty;

                ToastService.Notify(new()
                    {
                        Title = localizer["Success"],
                        Message = localizer["MsgPasswordUpdated"],
                        IconName = IconName.Check2Circle,
                        Type = ToastType.Success
                    });
            }
            else
            {
                throw new CustomMessageException("Msg_Password_Dont_Match");
            }

        }
        catch (CustomMessageException ex)
        {
            ToastService.Notify(new()
                {
                    Title = localizer["Warning"],
                    Message = localizer[ex.Message],
                    IconName = IconName.ExclamationDiamondFill,
                    Type = ToastType.Warning
                });

            Log.Warning(localizer[ex.Message]);
        }
        catch (CustomDataLayerException ex)
        {
            ToastService.Notify(new()
                {
                    Title = localizer["Warning"],
                    Message = ex.Message,
                    IconName = IconName.ExclamationDiamondFill,
                    Type = ToastType.Warning
                });

            Log.Warning(ex.Message);
        }
        catch (Exception ex)
        {
            ToastService.Notify(new()
                {
                    Title = localizer["Error"],
                    Message = ex.Message,
                    IconName = IconName.ExclamationDiamondFill,
                    Type = ToastType.Danger
                });

            Log.Error(ex, "An error occurred !");
        }
        finally
        {
            confirmButton.HideLoading();
        }
    }
    #endregion
}
