@page "/Computers/{idComputerString}"
@using Atlas_Monitoring_Web.Components.Partial
@using Atlas_Monitoring_Web.Core.Interfaces.Application
@using Atlas_Monitoring_Web.Core.Models.Internal
@using Atlas_Monitoring_Web.Core.Models.ViewModels
@using Atlas_Monitoring_Web.CustomException
@using Atlas_Monitoring_Web.Locales
@using Microsoft.Extensions.Localization
@using Serilog
@inject ToastService ToastService
@inject PreloadService PreloadService
@inject IComputerRepository _computerRepository
@inject IDeviceRepository _deviceRepository
@inject IEntityRepository _entityRepository

<div class="d-grid justify-content-md-end" style="margin-bottom: 20px">
    <Button Color="ButtonColor.Danger" @onclick="DeleteComputer">@localizer["DeleteDevice"]</Button>
</div>

<Tabs EnableFadeEffect="true">
    <Tab Active="true">
        <TitleTemplate>
            <Icon Name="IconName.Pc" /> @localizer["GeneralInfo"]
        </TitleTemplate>
        <Content>
            @if (computerReadViewModel != null)
            {
                <table class="table table-striped">
                    <tbody>
                        <tr>
                            <th>@localizer["VersionOfReporter"]</th>
                            <td>@versionOfReporter</td>
                        </tr>
                        <tr>
                            <th>@localizer["Status"]</th>
                            <td>
                                <select @onchange="(e => UpdateComputerStatus(computerReadViewModel.Id, (string)e.Value))" class="form-control">
                                    <option value="@DeviceStatus.New" selected="@(computerReadViewModel.DeviceStatus == DeviceStatus.New)">@localizer[$"DeviceStatus_{DeviceStatus.New}"]</option>
                                    <option value="@DeviceStatus.Ready" selected="@(computerReadViewModel.DeviceStatus == DeviceStatus.Ready)">@localizer[$"DeviceStatus_{DeviceStatus.Ready}"]</option>
                                    <option value="@DeviceStatus.InProduction" selected="@(computerReadViewModel.DeviceStatus == DeviceStatus.InProduction)">@localizer[$"DeviceStatus_{DeviceStatus.InProduction}"]</option>
                                    <option value="@DeviceStatus.Maintenance" selected="@(computerReadViewModel.DeviceStatus == DeviceStatus.Maintenance)">@localizer[$"DeviceStatus_{DeviceStatus.Maintenance}"]</option>
                                    <option value="@DeviceStatus.EndOfLife" selected="@(computerReadViewModel.DeviceStatus == DeviceStatus.EndOfLife)">@localizer[$"DeviceStatus_{DeviceStatus.EndOfLife}"]</option>
                                </select>
                            </td>
                        </tr>
                        <tr>
                            <th>@localizer["ComputerName"]</th>
                            <td>@computerReadViewModel.Name</td>
                        </tr>
                        <tr>
                            <th>@localizer["Entity"]</th>
                            <td>
                                <select @onchange="(e => UpdateComputerEntity(computerReadViewModel.Id, (string)e.Value))" class="form-control">
                                    <option value="" selected="@(computerReadViewModel.EntityId is null)">@localizer["SelectAnOption"]</option>

                                    @foreach (EntityReadViewModel entity in listOfEntities)
                                    {
                                        <option value="@entity.EntityId" selected="@(computerReadViewModel.EntityName == entity.Name)">@entity.Name</option>
                                    }
                                </select>
                            </td>
                        </tr>
                        <tr>
                            <th>Ip</th>
                            <td>@computerReadViewModel.Ip</td>
                        </tr>
                        <tr>
                            <th>@localizer["Domain"]</th>
                            <td>@computerReadViewModel.Domain</td>
                        </tr>
                        <tr>
                            <th>@localizer["RamInstalled"]</th>
                            <td>@Math.Round(computerReadViewModel.MaxRam)</td>
                        </tr>
                        <tr>
                            <th>@localizer["NumberOfLogicalProcessors"]</th>
                            <td>@computerReadViewModel.NumberOfLogicalProcessors</td>
                        </tr>
                        <tr>
                            <th>OS</th>
                            <td>@computerReadViewModel.OS</td>
                        </tr>
                        <tr>
                            <th>@localizer["OSVersion"]</th>
                            <td>@computerReadViewModel.OSVersion</td>
                        </tr>
                        <tr>
                            <th>@localizer["UserName"]</th>
                            <td>@computerReadViewModel.UserName</td>
                        </tr>
                        <tr>
                            <th>@localizer["SerialNumber"]</th>
                            <td>@computerReadViewModel.SerialNumber</td>
                        </tr>
                        <tr>
                            <th>@localizer["ManufacturerModel"]</th>
                            <td><b>@computerReadViewModel.Manufacturer</b> - @computerReadViewModel.Model</td>
                        </tr>
                        <tr>
                            <th>@localizer["DateAdd"]</th>
                            <td>@computerReadViewModel.DateAdd.ToString("dd/MM/yyyy HH:mm:ss")</td>
                        </tr>
                        <tr>
                            <th>@localizer["LastUpdate"]</th>
                            <td>@computerReadViewModel.DateUpdated.ToString("dd/MM/yyyy HH:mm:ss")</td>
                        </tr>
                        <tr>
                            <th>@localizer["Uptime"]</th>
                            <td>
                                @GetUptimeOfComputer()
                            </td>
                        </tr>
                    </tbody>
                </table>
            }
        </Content>
    </Tab>
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.App" /> @localizer["Software"]
        </TitleTemplate>
        <Content>
            @if (computerReadViewModel.SoftwareInstalled != null)
            {
                <table class="table table-striped">
                    <tbody>
                        @foreach (DeviceSoftwareInstalledReadViewModel software in computerReadViewModel.SoftwareInstalled.OrderBy(item => item.AppName))
                        {
                            <tr>
                                <td>@software.AppName</td>
                                <td>@software.Publisher</td>
                                <td>@software.Version</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </Content>
    </Tab>
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.PciCardNetwork" /> @localizer["Components"]
        </TitleTemplate>
        <Content>
            @if (computerReadViewModel.ComputerParts != null)
            {
                <table class="table table-striped">
                    <tbody>
                        @foreach (DevicePartsReadViewModel parts in computerReadViewModel.ComputerParts.OrderBy(item => item.Name))
                        {
                            <tr>
                                <td>@parts.Name</td>
                                <td>@parts.Labels</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </Content>
    </Tab>
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.DeviceHddFill" /> @localizer["HardDrive"]
        </TitleTemplate>
        <Content>
            @if (computerReadViewModel.ComputerHardDrives != null)
            {
                @foreach (DeviceHardDriveViewModel hardDrive in computerReadViewModel.ComputerHardDrives.OrderBy(item => item.Letter))
                {
                    <Card Color="CardColor.None" Class="mb-4" Style="width:18rem;">
                        <CardHeader>@hardDrive.Letter : @(GetPourcentDiskFree(hardDrive.TotalSpace, hardDrive.SpaceUse)) % @localizer["Free"]</CardHeader>
                        <CardBody>
                            <CardText>
                                <div class="row">
                                    @((hardDrive.SpaceUse / 1000000000).ToString("0.00")) Go / @((hardDrive.TotalSpace / 1000000000).ToString("0.00")) Go
                                </div>
                                <div class="row">
                                    <Progress Class="mb-3" Height="20" Style="padding: 0">
                                        <ProgressBar Width="100 - Convert.ToDouble(GetPourcentDiskFree(hardDrive.TotalSpace, hardDrive.SpaceUse))" />
                                    </Progress>
                                </div>
                            </CardText>
                        </CardBody>
                    </Card>
                }
            }
        </Content>
    </Tab>
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.Activity" /> @localizer["Performances"]
        </TitleTemplate>
        <Content>
            @if (computerReadViewModel.ComputerLastData != null && computerReadViewModel.ComputerLastData.Any())
            {
                <LineChartVisualisation lineChartDatasets="@lineChartDatasets" listOfLabelsX="listOfLabelsX" Title=@localizer["ComputerPerformance"] XLabel=@localizer["Date"] YLabel=@localizer["Percentage"] />
            }
            else
            {
                <h2>@localizer["NoDataSince24h"]</h2>
            }
        </Content>
    </Tab>
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.Activity" /> @localizer["History"]
        </TitleTemplate>
        <Content>
            @if (computerReadViewModel.ComputerHistory != null && computerReadViewModel.ComputerHistory.Any())
            {
                <table class="table table-stripped">
                    <tbody>
                        @foreach (DeviceHistoryReadViewModel data in computerReadViewModel.ComputerHistory.OrderByDescending(x => x.DateAdd))
                        {
                            <tr>
                                <td>[@data.DateAdd]</td>
                                <td>@data.Message</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <h2>@localizer["NoData"]</h2>
            }
        </Content>
    </Tab>
</Tabs>

<ConfirmDialog @ref="confirmDialog" />

@code {
    #region Properties
    [Parameter]
    public string idComputerString { get; set; } = string.Empty;
    private ComputerReadViewModel computerReadViewModel = new();

    private List<EntityReadViewModel> listOfEntities { get; set; } = new();

    private List<LineChartDataset> lineChartDatasets = new();
    private List<string> listOfLabelsX = new();
    private string versionOfReporter = string.Empty;
    private string ComputerUptime = string.Empty;

    private ConfirmDialog confirmDialog = default!;
    #endregion

    #region Constructor
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            PreloadService.Show();

            if (firstRender)
            {
                await LoadData();
                StateHasChanged();
            }
        }
        catch (CustomDataLayerException ex)
        {
            ToastService.Notify(new()
            {
                Title = localizer["Warning"],
                Message = ex.Message,
                IconName = IconName.ExclamationDiamondFill,
                Type = ToastType.Warning
            });

            Log.Warning(ex.Message);
        }
        catch (Exception ex)
        {
            ToastService.Notify(new()
            {
                Title = localizer["Error"],
                Message = ex.Message,
                IconName = IconName.ExclamationDiamondFill,
                Type = ToastType.Danger
            });

            Log.Error(ex, "An error occurred !");
        }
        finally
        {
            PreloadService.Hide();
        }
    }
    #endregion

    #region Private Methods
    private async Task LoadData()
    {
        computerReadViewModel = await _computerRepository.GetOneComputer(Guid.Parse(idComputerString));
        listOfEntities = await _entityRepository.GetListOfEntity();

        if (computerReadViewModel.ComputerLastData.Any())
        {
            listOfLabelsX = computerReadViewModel.ComputerLastData.Take(computerReadViewModel.ComputerLastData.Count > 50 ? 50 : computerReadViewModel.ComputerLastData.Count).OrderByDescending(item => item.DateAdd).Select(item => item.DateAdd.ToString("yyyy-MM-ss HH:mm:ss")).ToList();

            //Set LineDataSet for CPU
            lineChartDatasets.Add(new()
            {
                Label = "CPU",
                Data = computerReadViewModel.ComputerLastData.Take(computerReadViewModel.ComputerLastData.Count > 50 ? 50 : computerReadViewModel.ComputerLastData.Count).OrderByDescending(item => item.DateAdd).Select(item => Math.Round(item.ProcessorUtilityPourcent, 2)).ToList(),
                BackgroundColor = "#43ACF5",
                BorderColor = "#43ACF5",
                BorderWidth = 2,
                HoverBorderWidth = 4,
                PointBackgroundColor = "#43ACF5",
                PointRadius = 0, // hide points
                PointHoverRadius = 4,
            });

            //Set LineDataSet for Memory
            lineChartDatasets.Add(new()
            {
                Label = "RAM",
                Data = computerReadViewModel.ComputerLastData.Take(computerReadViewModel.ComputerLastData.Count > 50 ? 50 : computerReadViewModel.ComputerLastData.Count).OrderByDescending(item => item.DateAdd).Select(item => Math.Round(100 * (item.MemoryUsed / 1000000) / computerReadViewModel.MaxRam, 2)).ToList(),
                BackgroundColor = "#F9AF25",
                BorderColor = "#F9AF25",
                BorderWidth = 2,
                HoverBorderWidth = 4,
                PointBackgroundColor = "#F9AF25",
                PointRadius = 0, // hide points
                PointHoverRadius = 4,
            });
        }

        if (computerReadViewModel.SoftwareInstalled.Any() && computerReadViewModel.SoftwareInstalled.Where(item => item.AppName == "Atlas Monitoring Reporter").Any())
        {
            versionOfReporter = computerReadViewModel.SoftwareInstalled.Where(item => item.AppName == "Atlas Monitoring Reporter").First().Version;
        }
    }

    private string GetPourcentDiskFree(double totalSpace, double spaceUsed)
    {
        return (100 - (100 * spaceUsed / totalSpace)).ToString("0.00");
    }

    private async Task DeleteComputer()
    {
        var options = new ConfirmDialogOptions
        {
            YesButtonText = localizer["Confirm"],
            YesButtonColor = ButtonColor.Success,
            NoButtonText = localizer["Cancel"],
            NoButtonColor = ButtonColor.Danger
        };

        var confirmation = await confirmDialog.ShowAsync(
            title: localizer["DeletetionMessageDevice"],
            message1: localizer["MsgThisActionCantBeRollback"],
            confirmDialogOptions: options);

        if (confirmation)
        {
            await _deviceRepository.DeleteDevice(Guid.Parse(idComputerString));
            NavigationManager.NavigateTo("/Computers", true);
        }
    }

    private async Task UpdateComputerStatus(Guid computerId, string deviceStatus)
    {
        try
        {
            await _deviceRepository.UpdateDeviceStatus(computerId, (DeviceStatus)Enum.Parse(typeof(DeviceStatus), deviceStatus));

            ToastService.Notify(new()
            {
                Title = localizer["Success"],
                Message = localizer["Msg_Device_Status_Updated"],
                IconName = IconName.Check2Circle,
                Type = ToastType.Success
            });
        }
        catch (CustomDataLayerException ex)
        {
            ToastService.Notify(new()
            {
                Title = localizer["Warning"],
                Message = ex.Message,
                IconName = IconName.ExclamationDiamondFill,
                Type = ToastType.Warning
            });

            Log.Warning(ex.Message);
        }
        catch (Exception ex)
        {
            ToastService.Notify(new()
            {
                Title = localizer["Error"],
                Message = ex.Message,
                IconName = IconName.ExclamationDiamondFill,
                Type = ToastType.Danger
            });

            Log.Error(ex, "An error occurred !");
        }
    }

    private async Task UpdateComputerEntity(Guid computerId, string entityId)
    {
        try
        {
            if (entityId != string.Empty)
            {
                await _deviceRepository.UpdateDeviceEntity(computerId, Guid.Parse(entityId));

                ToastService.Notify(new()
                {
                    Title = localizer["Success"],
                    Message = localizer["Msg_Entity_Assigned"],
                    IconName = IconName.Check2Circle,
                    Type = ToastType.Success
                });
            }
            else
            {
                await _deviceRepository.UpdateDeviceEntity(computerId, Guid.Empty);

                ToastService.Notify(new()
                {
                    Title = localizer["Success"],
                    Message = localizer["Msg_Entity_Unassigned"],
                    IconName = IconName.Check2Circle,
                    Type = ToastType.Success
                });
            }
        }
        catch (CustomDataLayerException ex)
        {
            ToastService.Notify(new()
            {
                Title = localizer["Warning"],
                Message = ex.Message,
                IconName = IconName.ExclamationDiamondFill,
                Type = ToastType.Warning
            });

            Log.Warning(ex.Message);
        }
        catch (Exception ex)
        {
            ToastService.Notify(new()
            {
                Title = localizer["Error"],
                Message = ex.Message,
                IconName = IconName.ExclamationDiamondFill,
                Type = ToastType.Danger
            });

            Log.Error(ex, "An error occurred !");
        }
    }

    private string GetUptimeOfComputer()
    {
        double uptimeInSeconds = 0;
        if (computerReadViewModel.ComputerLastData.Any())
        {
            uptimeInSeconds = computerReadViewModel.ComputerLastData.OrderByDescending(x => x.DateAdd).FirstOrDefault().UptimeSinceInSecond;
        }
        else
        {
            return string.Empty;
        }

        TimeSpan diffOfDates = TimeSpan.FromSeconds(uptimeInSeconds);

        if (diffOfDates.Days > 0)
        {
            return $"{diffOfDates.Days} {localizer["Day"]} {diffOfDates.Hours} {localizer["Hour"]} {diffOfDates.Minutes} {localizer["Minute"]}";
        }
        else if (diffOfDates.Hours > 0)
        {
            return $"{diffOfDates.Hours} {localizer["Hour"]} {diffOfDates.Minutes} {localizer["Minute"]}";
        }
        else if (diffOfDates.Minutes > 0)
        {
            return $"{diffOfDates.Minutes} {localizer["Minute"]}";
        }
        else if (diffOfDates.Seconds > 0)
        {
            return $"{diffOfDates.Seconds} {localizer["Second"]}";
        }
        else
        {
            return string.Empty;
        }
    }
    #endregion
}
