@page "/Computers/{idComuterString}"
@using Atlas_Monitoring_Web.Components.Partial
@using Atlas_Monitoring_Web.Core.Interfaces.Application
@using Atlas_Monitoring_Web.Core.Models.Internal
@using Atlas_Monitoring_Web.Core.Models.ViewModels
@using Atlas_Monitoring_Web.CustomException
@using Atlas_Monitoring_Web.Locales
@using Microsoft.Extensions.Localization
@using Serilog
@inject ToastService ToastService
@inject PreloadService PreloadService
@inject IComputerDataRepository _computerDataRepository
@inject IComputerRepository _computerRepository
@inject IComputerHardDriveRepository _computerHardDriveRepository
@inject IComputerPartsRepository _computerPartsRepository
@inject IDeviceSoftwareInstalledRepository _deviceSoftwareInstalledRepository

<Tabs EnableFadeEffect="true">
    <Tab Active="true">
        <TitleTemplate>
            <Icon Name="IconName.Pc" /> @localizer["GeneralInfo"]
        </TitleTemplate>
        <Content>
            @if (computerReadViewModel != null)
            {
                <table class="table table-striped">
                    <tbody>
                        <tr>
                            <th>@localizer["Status"]</th>
                            <td></td>
                        </tr>
                        <tr>
                            <th>@localizer["ComputerName"]</th>
                            <td>@computerReadViewModel.Name</td>
                        </tr>
                        <tr>
                            <th>Ip</th>
                            <td>@computerReadViewModel.Ip</td>
                        </tr>
                        <tr>
                            <th>@localizer["Domain"]</th>
                            <td>@computerReadViewModel.Domain</td>
                        </tr>
                        <tr>
                            <th>@localizer["RamInstalled"]</th>
                            <td>@computerReadViewModel.MaxRam</td>
                        </tr>
                        <tr>
                            <th>OS</th>
                            <td>@computerReadViewModel.OS</td>
                        </tr>
                        <tr>
                            <th>@localizer["OSVersion"]</th>
                            <td>@computerReadViewModel.OSVersion</td>
                        </tr>
                        <tr>
                            <th>@localizer["UserName"]</th>
                            <td>@computerReadViewModel.UserName</td>
                        </tr>
                        <tr>
                            <th>@localizer["SerialNumber"]</th>
                            <td>@computerReadViewModel.SerialNumber</td>
                        </tr>
                        <tr>
                            <th>@localizer["ManufacturerModel"]</th>
                            <td><b>@computerReadViewModel.Manufacturer</b> - @computerReadViewModel.Model</td>
                        </tr>
                        <tr>
                            <th>@localizer["DateAdd"]</th>
                            <td>@computerReadViewModel.DateAdd.ToString("dd/MM/yyyy HH:mm:ss")</td>
                        </tr>
                        <tr>
                            <th>@localizer["LastUpdate"]</th>
                            <td>@computerReadViewModel.DateUpdated.ToString("dd/MM/yyyy HH:mm:ss")</td>
                        </tr>
                    </tbody>
                </table>
            }
        </Content>
    </Tab>
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.App" /> @localizer["Software"]
        </TitleTemplate>
        <Content>
            @if (computerSoftwareList != null)
            {
                <table class="table table-striped">
                    <tbody>
                        @foreach (DeviceSoftwareInstalledReadViewModel software in computerSoftwareList.OrderBy(item => item.AppName))
                        {
                            <tr>
                                <td>@software.AppName</td>
                                <td>@software.Publisher</td>
                                <td>@software.Version</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </Content>
    </Tab>
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.PciCardNetwork" /> @localizer["Components"]
        </TitleTemplate>
        <Content>
            @if (computerPartsViewModel != null)
            {
                <table class="table table-striped">
                    <tbody>
                        @foreach (DevicePartsReadViewModel parts in computerPartsViewModel.OrderBy(item => item.Name))
                        {
                            <tr>
                                <td>@parts.Name</td>
                                <td>@parts.Labels</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </Content>
    </Tab>
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.DeviceHddFill" /> @localizer["HardDrive"]
        </TitleTemplate>
        <Content>
            @if (computerHardDrivesViewModel != null)
            {
                @foreach (ComputerHardDriveViewModel hardDrive in computerHardDrivesViewModel.OrderBy(item => item.Letter))
                {
                    <Card Color="CardColor.None" Class="mb-4" Style="width:18rem;">
                        <CardHeader>@hardDrive.Letter : @(GetPourcentDiskFree(hardDrive.TotalSpace, hardDrive.SpaceUse)) % @localizer["Free"]</CardHeader>
                        <CardBody>
                            <CardText>
                                <div class="row">
                                    @((hardDrive.SpaceUse / 1000000000).ToString("0.00")) Go / @((hardDrive.TotalSpace / 1000000000).ToString("0.00")) Go
                                </div>
                                <div class="row">
                                    <Progress Class="mb-3" Height="20" Style="padding: 0">
                                        <ProgressBar Width="100 - Convert.ToDouble(GetPourcentDiskFree(hardDrive.TotalSpace, hardDrive.SpaceUse))" />
                                    </Progress>
                                </div>
                            </CardText>
                        </CardBody>
                    </Card>
                }
            }            
        </Content>
    </Tab>
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.Activity" /> @localizer["Performances"]
        </TitleTemplate>
        <Content>
            @if (computerDataViewModel != null && computerDataViewModel.Any())
            {
                <LineChartVisualisation lineChartDatasets="@lineChartDatasets" listOfLabelsX="listOfLabelsX" Title=@localizer["ComputerPerformance"] XLabel=@localizer["Date"] YLabel=@localizer["Percentage"] />
            }
            else
            {
                <h2>@localizer["NoDataSince24h"]</h2>
            }
        </Content>
    </Tab>
    <Tab>
        <TitleTemplate>
            <Icon Name="IconName.Activity" /> @localizer["History"]
        </TitleTemplate>
        <Content>
            @if (deviceHistoryViewModel != null && deviceHistoryViewModel.Any())
            {
                <table>
                    <tbody>
                        @foreach (DeviceHistoryViewModel data in deviceHistoryViewModel.OrderByDescending(x => x.DateAdd))
                        {
                            <tr>
                                <td>@data.DateAdd</td>
                                <td>@data.Message</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <h2>@localizer["NoData"]</h2>
            }
        </Content>
    </Tab>
</Tabs>


@code {
    #region Properties
    [Parameter]
    public string idComuterString { get; set; } = string.Empty;
    private ComputerReadViewModel computerReadViewModel;
    private List<ComputerHardDriveViewModel> computerHardDrivesViewModel;
    private List<ComputerDataViewModel> computerDataViewModel;
    private List<DeviceHistoryViewModel> deviceHistoryViewModel;
    private List<DevicePartsReadViewModel> computerPartsViewModel;
    private List<DeviceSoftwareInstalledReadViewModel> computerSoftwareList;

    private List<LineChartDataset> lineChartDatasets = new();
    private List<string> listOfLabelsX = new();
    #endregion

    #region Constructor
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            PreloadService.Show();

            if (firstRender)
            {
                await LoadData();
                StateHasChanged();
            }
        }
        catch (CustomDataLayerException ex)
        {
            ToastService.Notify(new()
                {
                    Title = localizer["Warning"],
                    Message = ex.Message,
                    IconName = IconName.ExclamationDiamondFill,
                    Type = ToastType.Warning
                });

            Log.Warning(ex.Message);
        }
        catch (Exception ex)
        {
            ToastService.Notify(new()
                {
                    Title = localizer["Error"],
                    Message = ex.Message,
                    IconName = IconName.ExclamationDiamondFill,
                    Type = ToastType.Danger
                });

            Log.Error(ex, "An error occurred !");
        }
        finally
        {
            PreloadService.Hide();
        }
    }
    #endregion

    #region Private Methods
    private async Task LoadData()
    {
        computerReadViewModel = await _computerRepository.GetOneComputer(Guid.Parse(idComuterString));
        computerHardDrivesViewModel = await _computerHardDriveRepository.GetHardDrivesOfAComputer(Guid.Parse(idComuterString));
        computerDataViewModel = await _computerDataRepository.GetAllComputerDataOfAComputer(Guid.Parse(idComuterString), DateTime.Now.AddDays(-1));
        computerPartsViewModel = await _computerPartsRepository.GetAllComputerPartByComputerId(Guid.Parse(idComuterString));
        computerSoftwareList = await _deviceSoftwareInstalledRepository.ListOfSoftwareOnDevice(Guid.Parse(idComuterString));

        if (computerDataViewModel.Any())
        {
            listOfLabelsX = computerDataViewModel.Take(computerDataViewModel.Count > 50 ? 50 : computerDataViewModel.Count).OrderByDescending(item => item.DateAdd).Select(item => item.DateAdd.ToString("yyyy-MM-ss HH:mm:ss")).ToList();

            //Set LineDataSet for CPU
            lineChartDatasets.Add(new()
            {
                    Label = "CPU",
                    Data = computerDataViewModel.Take(computerDataViewModel.Count > 50 ? 50 : computerDataViewModel.Count).OrderByDescending(item => item.DateAdd).Select(item => Math.Round(item.ProcessorUtilityPourcent, 2)).ToList(),
                    BackgroundColor = "#43ACF5",
                    BorderColor = "#43ACF5",
                    BorderWidth = 2,
                    HoverBorderWidth = 4,
                    PointBackgroundColor = "#43ACF5",
                    PointRadius = 0, // hide points
                    PointHoverRadius = 4,
            });

            //Set LineDataSet for Memory
            lineChartDatasets.Add(new()
            {
                    Label = "RAM",
                    Data = computerDataViewModel.Take(computerDataViewModel.Count > 50 ? 50 : computerDataViewModel.Count).OrderByDescending(item => item.DateAdd).Select(item => Math.Round(100 * (item.MemoryUsed / 1000000) / computerReadViewModel.MaxRam, 2)).ToList(),
                    BackgroundColor = "#F9AF25",
                    BorderColor = "#F9AF25",
                    BorderWidth = 2,
                    HoverBorderWidth = 4,
                    PointBackgroundColor = "#F9AF25",
                    PointRadius = 0, // hide points
                    PointHoverRadius = 4,
            });
        }
    }

    private string GetPourcentDiskFree(double totalSpace, double spaceUsed)
    {
        return (100 - (100 * spaceUsed / totalSpace)).ToString("0.00");
    }
    #endregion
}
