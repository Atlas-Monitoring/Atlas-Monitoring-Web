@page "/Computers"
@using Atlas_Monitoring_Web.Components.Modals.Devices
@using Atlas_Monitoring_Web.Core.Interfaces.Application
@using Atlas_Monitoring_Web.Core.Models.Internal
@using Atlas_Monitoring_Web.Core.Models.ViewModels
@using Atlas_Monitoring_Web.CustomException
@using Microsoft.Extensions.Localization
@using Atlas_Monitoring_Web.Locales
@using Serilog
@inject ToastService ToastService
@inject PreloadService PreloadService
@inject NavigationManager NavigationManager
@inject IComputerRepository _computerRepository
@inject IEntityRepository _entityRepository

<Grid @ref="grid" TItem="ComputerReadViewModel"
      Class="table table-hover table-bordered table-striped"
      DataProvider="ComputersDataProvider"
      AllowFiltering="true"
      AllowRowClick="true"
      AllowSorting="true"
      OnRowDoubleClick="OnRowDoubleClick"
      Responsive="true">

    <GridColumns>
        <GridColumn TItem="ComputerReadViewModel" HeaderText=@localizer["ComputerName"] PropertyName="Name" SortKeySelector="item => item.Name">
            @context.Name
        </GridColumn>
        <GridColumn TItem="ComputerReadViewModel" HeaderText=@localizer["Status"] PropertyName="DeviceStatus" SortKeySelector="item => item.DeviceStatus">
            <select @onchange="(e => UpdateComputerStatus(context.Id, (string)e.Value))" class="form-control">
                <option value="@DeviceStatus.New" selected="@(context.DeviceStatus == DeviceStatus.New)">@localizer[$"DeviceStatus_{DeviceStatus.New}"]</option>
                <option value="@DeviceStatus.Ready" selected="@(context.DeviceStatus == DeviceStatus.Ready)">@localizer[$"DeviceStatus_{DeviceStatus.Ready}"]</option>
                <option value="@DeviceStatus.InProduction" selected="@(context.DeviceStatus == DeviceStatus.InProduction)">@localizer[$"DeviceStatus_{DeviceStatus.InProduction}"]</option>
                <option value="@DeviceStatus.Maintenance" selected="@(context.DeviceStatus == DeviceStatus.Maintenance)">@localizer[$"DeviceStatus_{DeviceStatus.Maintenance}"]</option>
                <option value="@DeviceStatus.EndOfLife" selected="@(context.DeviceStatus == DeviceStatus.EndOfLife)">@localizer[$"DeviceStatus_{DeviceStatus.EndOfLife}"]</option>
            </select>
        </GridColumn>
        <GridColumn TItem="ComputerReadViewModel" HeaderText=@localizer["Entity"] PropertyName="EntityName" SortKeySelector="item => item.EntityName">
            <select @onchange="(e => UpdateComputerEntity(context.Id, (string)e.Value))" class="form-control">
                @foreach (EntityReadViewModel entity in listOfEntities)
                {
                    <option value="" selected="@(context.EntityId is null)">@localizer["SelectAnOption"]</option>
                    <option value="@entity.EntityId" selected="@(context.EntityName == entity.Name)">@entity.Name</option>
                }
            </select>
        </GridColumn>
        <GridColumn TItem="ComputerReadViewModel" HeaderText="Ip" PropertyName="Designation" SortKeySelector="item => item.Ip">
            @context.Ip
        </GridColumn>
        <GridColumn TItem="ComputerReadViewModel" HeaderText="OS" PropertyName="OS" SortKeySelector="item => item.OS">
            @context.OS
        </GridColumn>
        <GridColumn TItem="ComputerReadViewModel" HeaderText=@localizer["OSVersion"] PropertyName="OSVersion" SortKeySelector="item => item.OSVersion">
            @context.OSVersion
        </GridColumn>
        <GridColumn TItem="ComputerReadViewModel" HeaderText=@localizer["UserName"] PropertyName="UserName" SortKeySelector="item => item.UserName">
            @context.UserName
        </GridColumn>
        <GridColumn TItem="ComputerReadViewModel" HeaderText=@localizer["SerialNumber"] PropertyName="SerialNumber" SortKeySelector="item => item.SerialNumber">
            @context.SerialNumber
        </GridColumn>
        <GridColumn TItem="ComputerReadViewModel" HeaderText=@localizer["LastUpdate"] PropertyName="DateUpdated" SortKeySelector="item => item.DateUpdated">
            @context.DateUpdated.ToString("dd/MM/yyyy HH:mm:ss") @GetMinutesFromDateTime(context.DateUpdated)
        </GridColumn>
        <GridColumn TItem="ComputerReadViewModel" HeaderText=@localizer["Actions"]>
            @if (context.Ip != string.Empty)
            {
                <Button @onclick="() => ModalPingDevice(new(){ Name = context.Name, Ip = context.Ip })" Color="ButtonColor.Info" TooltipTitle="@localizer["PingDevice"]" TooltipPlacement="TooltipPlacement.Top"><Icon Name="IconName.Link45Deg" /></Button>
            }
        </GridColumn>
    </GridColumns>
</Grid>

<Modal @ref="modal" Size="ModalSize.Large" UseStaticBackdrop="true"></Modal>

@code {
    #region Properties
    private List<ComputerReadViewModel> listComputers { get; set; } = new();
    private List<EntityReadViewModel> listOfEntities { get; set; } = new();
    private Grid<ComputerReadViewModel> grid = default!;
    private Modal modal = default!;
    #endregion

    #region Constructor
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            PreloadService.Show();

            if (firstRender)
            {
                await LoadData();
                await grid.RefreshDataAsync();
            }
        }
        catch (CustomDataLayerException ex)
        {
            ToastService.Notify(new()
                {
                    Title = localizer["Warning"],
                    Message = ex.Message,
                    IconName = IconName.ExclamationDiamondFill,
                    Type = ToastType.Warning
                });

            Log.Warning(ex.Message);
        }
        catch (Exception ex)
        {
            ToastService.Notify(new()
                {
                    Title = localizer["Error"],
                    Message = ex.Message,
                    IconName = IconName.ExclamationDiamondFill,
                    Type = ToastType.Danger
                });

            Log.Error(ex, "An error occurred !");
        }
        finally
        {
            PreloadService.Hide();
        }
    }
    #endregion

    #region Private Methods
    private async Task LoadData()
    {
        listComputers = await _computerRepository.GetAllComputers();
        listOfEntities = await _entityRepository.GetListOfEntity();
    }

    private async Task<GridDataProviderResult<ComputerReadViewModel>> ComputersDataProvider(GridDataProviderRequest<ComputerReadViewModel> request)
    {
        return await Task.FromResult(request.ApplyTo(listComputers));
    }

    private async Task OnRowDoubleClick(GridRowEventArgs<ComputerReadViewModel> args)
    {
        NavigationManager.NavigateTo($"/Computers/{args.Item.Id.ToString()}", forceLoad: true);
    }

    private string GetMinutesFromDateTime(DateTime dateTime)
    {
        TimeSpan diffOfDates = DateTime.Now - dateTime;

        if (diffOfDates.Days > 0)
        {
            return $"({diffOfDates.Days} {localizer["Day"]})";
        }
        else if (diffOfDates.Hours > 0)
        {
            return $"({diffOfDates.Hours} {localizer["Hour"]})";
        }
        else if (diffOfDates.Minutes > 0)
        {
            return $"({diffOfDates.Minutes} {localizer["Minute"]})";
        }
        else if (diffOfDates.Seconds > 0)
        {
            return $"({diffOfDates.Seconds} {localizer["Second"]})";
        }
        else
        {
            return string.Empty;
        }
    }

    private async Task ModalPingDevice(DeviceReadViewModel deviceReadViewModel)
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("DeviceToPing", deviceReadViewModel);

        await modal.ShowAsync<MPingDevice>(title: localizer["PingDevice"], parameters: parameters);
    }

    private async Task UpdateComputerStatus(Guid computerId, string deviceStatus)
    {
        try
        {
            await _computerRepository.UpdateComputerStatus(computerId, (DeviceStatus)Enum.Parse(typeof(DeviceStatus), deviceStatus));

            ToastService.Notify(new()
                {
                    Title = localizer["Success"],
                    Message = localizer["Msg_Device_Status_Updated"],
                    IconName = IconName.Check2Circle,
                    Type = ToastType.Success
                });
        }
        catch (CustomDataLayerException ex)
        {
            ToastService.Notify(new()
                {
                    Title = localizer["Warning"],
                    Message = ex.Message,
                    IconName = IconName.ExclamationDiamondFill,
                    Type = ToastType.Warning
                });

            Log.Warning(ex.Message);
        }
        catch (Exception ex)
        {
            ToastService.Notify(new()
                {
                    Title = localizer["Error"],
                    Message = ex.Message,
                    IconName = IconName.ExclamationDiamondFill,
                    Type = ToastType.Danger
                });

            Log.Error(ex, "An error occurred !");
        }
    }

    private async Task UpdateComputerEntity(Guid computerId, string entityId)
    {
        try
        {
            if (entityId != string.Empty)
            {
                await _computerRepository.UpdateComputerEntity(computerId, Guid.Parse(entityId));

                ToastService.Notify(new()
                    {
                        Title = localizer["Success"],
                        Message = localizer["Msg_Entity_Assigned"],
                        IconName = IconName.Check2Circle,
                        Type = ToastType.Success
                    });
            }
            else
            {
                await _computerRepository.UpdateComputerEntity(computerId, Guid.Empty);

                ToastService.Notify(new()
                    {
                        Title = localizer["Success"],
                        Message = localizer["Msg_Entity_Unassigned"],
                        IconName = IconName.Check2Circle,
                        Type = ToastType.Success
                    });
            }
        }
        catch (CustomDataLayerException ex)
        {
            ToastService.Notify(new()
                {
                    Title = localizer["Warning"],
                    Message = ex.Message,
                    IconName = IconName.ExclamationDiamondFill,
                    Type = ToastType.Warning
                });

            Log.Warning(ex.Message);
        }
        catch (Exception ex)
        {
            ToastService.Notify(new()
                {
                    Title = localizer["Error"],
                    Message = ex.Message,
                    IconName = IconName.ExclamationDiamondFill,
                    Type = ToastType.Danger
                });

            Log.Error(ex, "An error occurred !");
        }
    }
    #endregion
}
