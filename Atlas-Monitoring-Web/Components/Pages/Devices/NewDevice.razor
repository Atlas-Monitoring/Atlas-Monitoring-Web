@page "/NewDevice"
@using Atlas_Monitoring_Web.Core.Interfaces.Application
@using Atlas_Monitoring_Web.Core.Models.Database
@using Atlas_Monitoring_Web.Core.Models.ViewModels
@using Atlas_Monitoring_Web.CustomException
@using Atlas_Monitoring_Web.Locales
@using Microsoft.Extensions.Localization
@using Serilog
@inject ToastService ToastService
@inject PreloadService PreloadService
@inject IDeviceRepository _deviceRepository

<div style="max-width: 350px; display:block; margin: auto">
    <div class="row">
        <div class="form-control col">
            <label>@localizer["DeviceType"] : </label>
            <select class="form-control" @bind="@NewDeviceViewModel.DeviceTypeId">
                @foreach (DeviceType deviceType in ListDeviceType.Where(x => x.Id != DeviceType.Computer.Id && x.Id != DeviceType.Server.Id))
                {
                    <option value="@deviceType.Id">@localizer[deviceType.Name]</option>
                }
            </select>
        </div>
    </div>

    <div class="row">
        <div class="form-group col">
            <label>@localizer["DeviceName"] : </label>
            <input class="form-control" @bind-value="NewDeviceViewModel.Name" maxlength="35"/>
        </div>
    </div>

    <div class="row">
        <div class="form-group col">
            <label>Ip : </label>
            <input class="form-control" @bind-value="NewDeviceViewModel.Ip" maxlength="15" />
        </div>
    </div>

    <div class="row">
        <div class="form-group col">
            <label>@localizer["Domain"] : </label>
            <input class="form-control" @bind-value="NewDeviceViewModel.Domain" maxlength="25" />
        </div>
    </div>

    <div class="row">
        <div class="form-group col">
            <label>@localizer["UserName"] : </label>
            <input class="form-control" @bind-value="NewDeviceViewModel.UserName" maxlength="48" />
        </div>
    </div>

    <div class="row">
        <div class="form-group col">
            <label>@localizer["SerialNumber"] : </label>
            <input class="form-control" @bind-value="NewDeviceViewModel.SerialNumber" maxlength="120" />
        </div>
    </div>

    <div class="row">
        <div class="form-group col">
            <label>@localizer["Model"] : </label>
            <input class="form-control" @bind-value="NewDeviceViewModel.Model" maxlength="60" />
        </div>
    </div>

    <div class="row">
        <div class="form-group col">
            <label>@localizer["Manufacturer"] : </label>
            <input class="form-control" @bind-value="NewDeviceViewModel.Manufacturer" maxlength="60" />
        </div>
    </div>

    <Button Color="ButtonColor.Primary" style="display: block; margin: auto; margin-top: 20px" @onclick="AddDevice">@localizer["AddDevice"]</Button>
</div>



@code {
    #region Properties
    private DeviceWriteViewModel NewDeviceViewModel = new();
    private List<DeviceType> ListDeviceType = new();
    #endregion

    #region Constructor
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            PreloadService.Show();

            if (firstRender)
            {
                ListDeviceType = DeviceType.GetAllDeviceType();

                StateHasChanged();
            }

            await base.OnAfterRenderAsync(firstRender);
        }
        catch (CustomDataLayerException ex)
        {
            ToastService.Notify(new()
                {
                    Title = localizer["Warning"],
                    Message = ex.Message,
                    IconName = IconName.ExclamationDiamondFill,
                    Type = ToastType.Warning
                });

            Log.Warning(ex.Message);
        }
        catch (Exception ex)
        {
            ToastService.Notify(new()
                {
                    Title = localizer["Error"],
                    Message = ex.Message,
                    IconName = IconName.ExclamationDiamondFill,
                    Type = ToastType.Danger
                });

            Log.Error(ex, "An error occurred !");
        }
        finally
        {
            PreloadService.Hide();
        }
    }
    #endregion

    #region Private Methods
    private async Task AddDevice()
    {
        try
        {
            CheckNewDeviceData();

            await _deviceRepository.CreateNewDevice(NewDeviceViewModel);

            ToastService.Notify(new()
                {
                    Title = localizer["Success"],
                    Message = localizer["Msg_DeviceAdded"],
                    IconName = IconName.Check,
                    Type = ToastType.Success
                });

            NewDeviceViewModel = new();
        }
        catch (CustomWebException ex)
        {
            ToastService.Notify(new()
                {
                    Title = localizer["Warning"],
                    Message = ex.Message,
                    IconName = IconName.ExclamationDiamondFill,
                    Type = ToastType.Warning
                });

            Log.Warning(ex.Message);
        }
        catch (CustomDataLayerException ex)
        {
            ToastService.Notify(new()
                {
                    Title = localizer["Warning"],
                    Message = ex.Message,
                    IconName = IconName.ExclamationDiamondFill,
                    Type = ToastType.Warning
                });

            Log.Warning(ex.Message);
        }
        catch (Exception ex)
        {
            ToastService.Notify(new()
                {
                    Title = localizer["Error"],
                    Message = ex.Message,
                    IconName = IconName.ExclamationDiamondFill,
                    Type = ToastType.Danger
                });

            Log.Error(ex, "An error occurred !");
        }
    }

    private void CheckNewDeviceData()
    {
        if (NewDeviceViewModel.Name == string.Empty)
        {
            throw new CustomWebException(localizer["Err_DeviceNameEmpty"]);
        }
        else if (NewDeviceViewModel.DeviceTypeId == DeviceType.Undefined.Id)
        {
            throw new CustomWebException(localizer["Err_SelectValidDeviceType"]);
        }
    }
    #endregion
}
