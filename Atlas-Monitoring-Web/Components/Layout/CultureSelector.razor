@inject NavigationManager Navigation
@using System.Globalization

<style>
    .select__input {
        /* Reset default dropdown style */
        appearance: none;
        border: 0;
        margin: 0;
        font-size: 1rem;
        width: 100%;
        height: 100%;
        /* Custom dropdown styling */
        padding: 0.5rem 1rem;
        box-shadow: inset 0 1px 0 hsla(0, 0%, 100%, 0.1), 0 0 0 1px hsla(230, 13%, 9%, 0.02), 0 0.3px 0.4px hsla(230, 13%, 9%, 0.025), 0 1px 3px -1px hsla(230, 13%, 9%, 0.2), 0 3.5px 6px hsla(230, 13%, 9%, 0.12);
        border-radius: 0.375em;
        transition: box-shadow 0.2s;
        user-select: none;
    }

        .select__input:focus {
            outline: none;
            box-shadow: inset 0 1px 0 hsla(0, 0%, 100%, 0.1), 0 0 0 1px hsla(230, 13%, 9%, 0.02), 0 0.3px 0.4px hsla(230, 13%, 9%, 0.025), 0 1px 3px -1px hsla(230, 13%, 9%, 0.2), 0 3.5px 6px hsla(230, 13%, 9%, 0.12), 0 0 0 2px hsl(0, 0%, 100%), 0 0 0 4px hsl(230, 7%, 23%);
        }

    :root {
        --select-icon-size: 16px; /* Icon size */
        --select-icon-margin: 1rem; /* Icon left/right positioning */
        --select-text-icon-gap: 0.5rem; /* Space between text and icon */
    }

    .select {
        position: relative;
    }

    .select__arrow,
    .select__flag {
        display: inline-block;
        position: absolute;
        /* Center both icons vertically */
        top: 50%;
        transform: translateY(-50%);
        width: var(--select-icon-size);
        height: var(--select-icon-size);
        pointer-events: none;
    }

    .select__arrow {
        color: inherit;
        right: var(--select-icon-margin);
    }

    .select__flag {
        left: var(--select-icon-margin);
    }

    .select__input {
        padding: 0.5rem calc(var(--select-icon-size) + var(--select-icon-margin) + var(--select-text-icon-gap));
    }

    .select__flag {
        background-position: center;
        background-repeat: no-repeat;
        background-size: var(--select-icon-size);
        /* Default world icon as SVG dataURI */
        background-image: url("data:image/svg...");
    }
</style>

<div>
    <div class="select">
        <span class="select__flag" aria-hidden="true" style="background-image: url('/Icons/Flags/@(Culture.Name).svg');"></span>

        <select class="select__input" name="country-selector" id="country-selector" @bind="Culture">
            <option value="en-US">English</option>
            <option value="fr-FR">Français</option>
        </select>

        <svg class="select__arrow" aria-hidden="true" viewBox="0 0 16 16"><polyline points="3.5,6.5 8,11 12.5,6.5" stroke-width="2" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"></polyline></svg>
    </div>
</div>

@code
{
    protected override void OnInitialized()
    {
        Culture = CultureInfo.CurrentCulture;
    }

    private CultureInfo Culture
    {
        get
        {
            return CultureInfo.CurrentCulture;
        }
        set
        {
            if (CultureInfo.CurrentCulture != value)
            {
                var uri = new Uri(Navigation.Uri).GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);
                var cultureEscaped = Uri.EscapeDataString(value.Name);
                var uriEscaped = Uri.EscapeDataString(uri);

                Navigation.NavigateTo($"Culture/Set?culture={cultureEscaped}&redirectUri={uriEscaped}", forceLoad: true);
            }
        }
    }
}